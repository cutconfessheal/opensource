//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;

namespace Research.Services.Northwind.NorthwindDataSetEntities
{

	public class Category
	{
		private Research.DataAccess.Northwind.NorthwindDataSet.CategoryRow m_DataRow = null;

		public Category() { }

		public Category(Research.DataAccess.Northwind.NorthwindDataSet.CategoryRow dataRow) { m_DataRow = dataRow; }

		#region Columns

		public System.Int32 CategoryID
		{
			get
			{
				return m_DataRow.CategoryID;
			}
			set
			{
				m_DataRow.CategoryID = value;
			}
		}


		public System.String CategoryName
		{
			get
			{
				return m_DataRow.CategoryName;
			}
			set
			{
				m_DataRow.CategoryName = value;
			}
		}


		public System.String Description
		{
			get
			{
				if(m_DataRow.IsNull("Description"))
					return null;
				return m_DataRow.Description;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetDescriptionNull();
				}
				else
				{
					m_DataRow.Description = value;
				}
			}
		}


		public System.Byte[] Picture
		{
			get
			{
				if(m_DataRow.IsNull("Picture"))
					return null;
				return m_DataRow.Picture;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetPictureNull();
				}
				else
				{
					m_DataRow.Picture = value;
				}
			}
		}

		#endregion Columns

		#region Relations

		public ICollection<Research.Services.Northwind.NorthwindDataSetEntities.Product> Products
		{
			get
			{
				Research.DataAccess.Northwind.NorthwindDataSet.ProductRow[] rows = m_DataRow.GetProductRows();
				if(rows == null)
					return null;
				if(rows.Count() < 1)
					return new List<Research.Services.Northwind.NorthwindDataSetEntities.Product>();
				ICollection<Research.Services.Northwind.NorthwindDataSetEntities.Product> collection = new List<Research.Services.Northwind.NorthwindDataSetEntities.Product>();
				rows.ToList().ForEach(model => collection.Add(new Research.Services.Northwind.NorthwindDataSetEntities.Product(model)));
				return collection;
			}
		}

		#endregion Relations

		public Research.DataAccess.Northwind.NorthwindDataSet.CategoryRow DataRow
		{
			get
			{
				return m_DataRow;
			}
			set
			{
				m_DataRow = value;
			}
		}
	}


	public class Customer
	{
		private Research.DataAccess.Northwind.NorthwindDataSet.CustomerRow m_DataRow = null;

		public Customer() { }

		public Customer(Research.DataAccess.Northwind.NorthwindDataSet.CustomerRow dataRow) { m_DataRow = dataRow; }

		#region Columns

		public System.String CustomerID
		{
			get
			{
				return m_DataRow.CustomerID;
			}
			set
			{
				m_DataRow.CustomerID = value;
			}
		}


		public System.String CompanyName
		{
			get
			{
				return m_DataRow.CompanyName;
			}
			set
			{
				m_DataRow.CompanyName = value;
			}
		}


		public System.String ContactName
		{
			get
			{
				if(m_DataRow.IsNull("ContactName"))
					return null;
				return m_DataRow.ContactName;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetContactNameNull();
				}
				else
				{
					m_DataRow.ContactName = value;
				}
			}
		}


		public System.String ContactTitle
		{
			get
			{
				if(m_DataRow.IsNull("ContactTitle"))
					return null;
				return m_DataRow.ContactTitle;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetContactTitleNull();
				}
				else
				{
					m_DataRow.ContactTitle = value;
				}
			}
		}


		public System.String Address
		{
			get
			{
				if(m_DataRow.IsNull("Address"))
					return null;
				return m_DataRow.Address;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetAddressNull();
				}
				else
				{
					m_DataRow.Address = value;
				}
			}
		}


		public System.String City
		{
			get
			{
				if(m_DataRow.IsNull("City"))
					return null;
				return m_DataRow.City;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetCityNull();
				}
				else
				{
					m_DataRow.City = value;
				}
			}
		}


		public System.String Region
		{
			get
			{
				if(m_DataRow.IsNull("Region"))
					return null;
				return m_DataRow.Region;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetRegionNull();
				}
				else
				{
					m_DataRow.Region = value;
				}
			}
		}


		public System.String PostalCode
		{
			get
			{
				if(m_DataRow.IsNull("PostalCode"))
					return null;
				return m_DataRow.PostalCode;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetPostalCodeNull();
				}
				else
				{
					m_DataRow.PostalCode = value;
				}
			}
		}


		public System.String Country
		{
			get
			{
				if(m_DataRow.IsNull("Country"))
					return null;
				return m_DataRow.Country;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetCountryNull();
				}
				else
				{
					m_DataRow.Country = value;
				}
			}
		}


		public System.String Phone
		{
			get
			{
				if(m_DataRow.IsNull("Phone"))
					return null;
				return m_DataRow.Phone;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetPhoneNull();
				}
				else
				{
					m_DataRow.Phone = value;
				}
			}
		}


		public System.String Fax
		{
			get
			{
				if(m_DataRow.IsNull("Fax"))
					return null;
				return m_DataRow.Fax;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetFaxNull();
				}
				else
				{
					m_DataRow.Fax = value;
				}
			}
		}

		#endregion Columns

		#region Relations

		public ICollection<Research.Services.Northwind.NorthwindDataSetEntities.Order> Orders
		{
			get
			{
				Research.DataAccess.Northwind.NorthwindDataSet.OrderRow[] rows = m_DataRow.GetOrderRows();
				if(rows == null)
					return null;
				if(rows.Count() < 1)
					return new List<Research.Services.Northwind.NorthwindDataSetEntities.Order>();
				ICollection<Research.Services.Northwind.NorthwindDataSetEntities.Order> collection = new List<Research.Services.Northwind.NorthwindDataSetEntities.Order>();
				rows.ToList().ForEach(model => collection.Add(new Research.Services.Northwind.NorthwindDataSetEntities.Order(model)));
				return collection;
			}
		}

		#endregion Relations

		public Research.DataAccess.Northwind.NorthwindDataSet.CustomerRow DataRow
		{
			get
			{
				return m_DataRow;
			}
			set
			{
				m_DataRow = value;
			}
		}
	}


	public class Employee
	{
		private Research.DataAccess.Northwind.NorthwindDataSet.EmployeeRow m_DataRow = null;

		public Employee() { }

		public Employee(Research.DataAccess.Northwind.NorthwindDataSet.EmployeeRow dataRow) { m_DataRow = dataRow; }

		#region Columns

		public System.Int32 EmployeeID
		{
			get
			{
				return m_DataRow.EmployeeID;
			}
			set
			{
				m_DataRow.EmployeeID = value;
			}
		}


		public System.String LastName
		{
			get
			{
				return m_DataRow.LastName;
			}
			set
			{
				m_DataRow.LastName = value;
			}
		}


		public System.String FirstName
		{
			get
			{
				return m_DataRow.FirstName;
			}
			set
			{
				m_DataRow.FirstName = value;
			}
		}


		public System.String Title
		{
			get
			{
				if(m_DataRow.IsNull("Title"))
					return null;
				return m_DataRow.Title;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetTitleNull();
				}
				else
				{
					m_DataRow.Title = value;
				}
			}
		}


		public System.String TitleOfCourtesy
		{
			get
			{
				if(m_DataRow.IsNull("TitleOfCourtesy"))
					return null;
				return m_DataRow.TitleOfCourtesy;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetTitleOfCourtesyNull();
				}
				else
				{
					m_DataRow.TitleOfCourtesy = value;
				}
			}
		}


		public System.DateTime? BirthDate
		{
			get
			{
				return (System.DateTime?)m_DataRow.BirthDate;
			}
			set
			{
				if(!value.HasValue)
				{
					m_DataRow.SetBirthDateNull();
				}
				else
				{
					m_DataRow.BirthDate = value.Value;
				}
			}
		}


		public System.DateTime? HireDate
		{
			get
			{
				return (System.DateTime?)m_DataRow.HireDate;
			}
			set
			{
				if(!value.HasValue)
				{
					m_DataRow.SetHireDateNull();
				}
				else
				{
					m_DataRow.HireDate = value.Value;
				}
			}
		}


		public System.String Address
		{
			get
			{
				if(m_DataRow.IsNull("Address"))
					return null;
				return m_DataRow.Address;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetAddressNull();
				}
				else
				{
					m_DataRow.Address = value;
				}
			}
		}


		public System.String City
		{
			get
			{
				if(m_DataRow.IsNull("City"))
					return null;
				return m_DataRow.City;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetCityNull();
				}
				else
				{
					m_DataRow.City = value;
				}
			}
		}


		public System.String Region
		{
			get
			{
				if(m_DataRow.IsNull("Region"))
					return null;
				return m_DataRow.Region;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetRegionNull();
				}
				else
				{
					m_DataRow.Region = value;
				}
			}
		}


		public System.String PostalCode
		{
			get
			{
				if(m_DataRow.IsNull("PostalCode"))
					return null;
				return m_DataRow.PostalCode;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetPostalCodeNull();
				}
				else
				{
					m_DataRow.PostalCode = value;
				}
			}
		}


		public System.String Country
		{
			get
			{
				if(m_DataRow.IsNull("Country"))
					return null;
				return m_DataRow.Country;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetCountryNull();
				}
				else
				{
					m_DataRow.Country = value;
				}
			}
		}


		public System.String HomePhone
		{
			get
			{
				if(m_DataRow.IsNull("HomePhone"))
					return null;
				return m_DataRow.HomePhone;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetHomePhoneNull();
				}
				else
				{
					m_DataRow.HomePhone = value;
				}
			}
		}


		public System.String Extension
		{
			get
			{
				if(m_DataRow.IsNull("Extension"))
					return null;
				return m_DataRow.Extension;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetExtensionNull();
				}
				else
				{
					m_DataRow.Extension = value;
				}
			}
		}


		public System.Byte[] Photo
		{
			get
			{
				if(m_DataRow.IsNull("Photo"))
					return null;
				return m_DataRow.Photo;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetPhotoNull();
				}
				else
				{
					m_DataRow.Photo = value;
				}
			}
		}


		public System.String Notes
		{
			get
			{
				if(m_DataRow.IsNull("Notes"))
					return null;
				return m_DataRow.Notes;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetNotesNull();
				}
				else
				{
					m_DataRow.Notes = value;
				}
			}
		}


		public System.Int32? ReportsTo
		{
			get
			{
				return (System.Int32?)m_DataRow.ReportsTo;
			}
			set
			{
				if(!value.HasValue)
				{
					m_DataRow.SetReportsToNull();
				}
				else
				{
					m_DataRow.ReportsTo = value.Value;
				}
			}
		}


		public System.String PhotoPath
		{
			get
			{
				if(m_DataRow.IsNull("PhotoPath"))
					return null;
				return m_DataRow.PhotoPath;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetPhotoPathNull();
				}
				else
				{
					m_DataRow.PhotoPath = value;
				}
			}
		}

		#endregion Columns

		#region Relations

		public ICollection<Research.Services.Northwind.NorthwindDataSetEntities.Employee> Employees
		{
			get
			{
				Research.DataAccess.Northwind.NorthwindDataSet.EmployeeRow[] rows = m_DataRow.GetEmployeeRows();
				if(rows == null)
					return null;
				if(rows.Count() < 1)
					return new List<Research.Services.Northwind.NorthwindDataSetEntities.Employee>();
				ICollection<Research.Services.Northwind.NorthwindDataSetEntities.Employee> collection = new List<Research.Services.Northwind.NorthwindDataSetEntities.Employee>();
				rows.ToList().ForEach(model => collection.Add(new Research.Services.Northwind.NorthwindDataSetEntities.Employee(model)));
				return collection;
			}
		}


		public ICollection<Research.Services.Northwind.NorthwindDataSetEntities.Order> Orders
		{
			get
			{
				Research.DataAccess.Northwind.NorthwindDataSet.OrderRow[] rows = m_DataRow.GetOrderRows();
				if(rows == null)
					return null;
				if(rows.Count() < 1)
					return new List<Research.Services.Northwind.NorthwindDataSetEntities.Order>();
				ICollection<Research.Services.Northwind.NorthwindDataSetEntities.Order> collection = new List<Research.Services.Northwind.NorthwindDataSetEntities.Order>();
				rows.ToList().ForEach(model => collection.Add(new Research.Services.Northwind.NorthwindDataSetEntities.Order(model)));
				return collection;
			}
		}

		public Research.Services.Northwind.NorthwindDataSetEntities.Employee ParentEmployee
		{
			get
			{
				if(m_DataRow.EmployeeRowParent == null)
					return null;
				return new Research.Services.Northwind.NorthwindDataSetEntities.Employee(m_DataRow.EmployeeRowParent);
			}
			set
			{
				m_DataRow.EmployeeRowParent = value.DataRow;
			}
		}

		#endregion Relations

		public Research.DataAccess.Northwind.NorthwindDataSet.EmployeeRow DataRow
		{
			get
			{
				return m_DataRow;
			}
			set
			{
				m_DataRow = value;
			}
		}
	}


	public class OrderDetail
	{
		private Research.DataAccess.Northwind.NorthwindDataSet.OrderDetailRow m_DataRow = null;

		public OrderDetail() { }

		public OrderDetail(Research.DataAccess.Northwind.NorthwindDataSet.OrderDetailRow dataRow) { m_DataRow = dataRow; }

		#region Columns

		public System.Int32 OrderID
		{
			get
			{
				return m_DataRow.OrderID;
			}
			set
			{
				m_DataRow.OrderID = value;
			}
		}


		public System.Int32 ProductID
		{
			get
			{
				return m_DataRow.ProductID;
			}
			set
			{
				m_DataRow.ProductID = value;
			}
		}


		public System.Decimal UnitPrice
		{
			get
			{
				return m_DataRow.UnitPrice;
			}
			set
			{
				m_DataRow.UnitPrice = value;
			}
		}


		public System.Int16 Quantity
		{
			get
			{
				return m_DataRow.Quantity;
			}
			set
			{
				m_DataRow.Quantity = value;
			}
		}


		public System.Single Discount
		{
			get
			{
				return m_DataRow.Discount;
			}
			set
			{
				m_DataRow.Discount = value;
			}
		}

		#endregion Columns

		#region Relations
		public Research.Services.Northwind.NorthwindDataSetEntities.Product Product
		{
			get
			{
				if(m_DataRow.ProductRow == null)
					return null;
				return new Research.Services.Northwind.NorthwindDataSetEntities.Product(m_DataRow.ProductRow);
			}
			set
			{
				m_DataRow.ProductRow = value.DataRow;
			}
		}

		public Research.Services.Northwind.NorthwindDataSetEntities.Order Order
		{
			get
			{
				if(m_DataRow.OrderRow == null)
					return null;
				return new Research.Services.Northwind.NorthwindDataSetEntities.Order(m_DataRow.OrderRow);
			}
			set
			{
				m_DataRow.OrderRow = value.DataRow;
			}
		}

		#endregion Relations

		public Research.DataAccess.Northwind.NorthwindDataSet.OrderDetailRow DataRow
		{
			get
			{
				return m_DataRow;
			}
			set
			{
				m_DataRow = value;
			}
		}
	}


	public class Order
	{
		private Research.DataAccess.Northwind.NorthwindDataSet.OrderRow m_DataRow = null;

		public Order() { }

		public Order(Research.DataAccess.Northwind.NorthwindDataSet.OrderRow dataRow) { m_DataRow = dataRow; }

		#region Columns

		public System.Int32 OrderID
		{
			get
			{
				return m_DataRow.OrderID;
			}
			set
			{
				m_DataRow.OrderID = value;
			}
		}


		public System.String CustomerID
		{
			get
			{
				if(m_DataRow.IsNull("CustomerID"))
					return null;
				return m_DataRow.CustomerID;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetCustomerIDNull();
				}
				else
				{
					m_DataRow.CustomerID = value;
				}
			}
		}


		public System.Int32? EmployeeID
		{
			get
			{
				return (System.Int32?)m_DataRow.EmployeeID;
			}
			set
			{
				if(!value.HasValue)
				{
					m_DataRow.SetEmployeeIDNull();
				}
				else
				{
					m_DataRow.EmployeeID = value.Value;
				}
			}
		}


		public System.DateTime? OrderDate
		{
			get
			{
				return (System.DateTime?)m_DataRow.OrderDate;
			}
			set
			{
				if(!value.HasValue)
				{
					m_DataRow.SetOrderDateNull();
				}
				else
				{
					m_DataRow.OrderDate = value.Value;
				}
			}
		}


		public System.DateTime? RequiredDate
		{
			get
			{
				return (System.DateTime?)m_DataRow.RequiredDate;
			}
			set
			{
				if(!value.HasValue)
				{
					m_DataRow.SetRequiredDateNull();
				}
				else
				{
					m_DataRow.RequiredDate = value.Value;
				}
			}
		}


		public System.DateTime? ShippedDate
		{
			get
			{
				return (System.DateTime?)m_DataRow.ShippedDate;
			}
			set
			{
				if(!value.HasValue)
				{
					m_DataRow.SetShippedDateNull();
				}
				else
				{
					m_DataRow.ShippedDate = value.Value;
				}
			}
		}


		public System.Int32? ShipVia
		{
			get
			{
				return (System.Int32?)m_DataRow.ShipVia;
			}
			set
			{
				if(!value.HasValue)
				{
					m_DataRow.SetShipViaNull();
				}
				else
				{
					m_DataRow.ShipVia = value.Value;
				}
			}
		}


		public System.Decimal? Freight
		{
			get
			{
				return (System.Decimal?)m_DataRow.Freight;
			}
			set
			{
				if(!value.HasValue)
				{
					m_DataRow.SetFreightNull();
				}
				else
				{
					m_DataRow.Freight = value.Value;
				}
			}
		}


		public System.String ShipName
		{
			get
			{
				if(m_DataRow.IsNull("ShipName"))
					return null;
				return m_DataRow.ShipName;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetShipNameNull();
				}
				else
				{
					m_DataRow.ShipName = value;
				}
			}
		}


		public System.String ShipAddress
		{
			get
			{
				if(m_DataRow.IsNull("ShipAddress"))
					return null;
				return m_DataRow.ShipAddress;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetShipAddressNull();
				}
				else
				{
					m_DataRow.ShipAddress = value;
				}
			}
		}


		public System.String ShipCity
		{
			get
			{
				if(m_DataRow.IsNull("ShipCity"))
					return null;
				return m_DataRow.ShipCity;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetShipCityNull();
				}
				else
				{
					m_DataRow.ShipCity = value;
				}
			}
		}


		public System.String ShipRegion
		{
			get
			{
				if(m_DataRow.IsNull("ShipRegion"))
					return null;
				return m_DataRow.ShipRegion;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetShipRegionNull();
				}
				else
				{
					m_DataRow.ShipRegion = value;
				}
			}
		}


		public System.String ShipPostalCode
		{
			get
			{
				if(m_DataRow.IsNull("ShipPostalCode"))
					return null;
				return m_DataRow.ShipPostalCode;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetShipPostalCodeNull();
				}
				else
				{
					m_DataRow.ShipPostalCode = value;
				}
			}
		}


		public System.String ShipCountry
		{
			get
			{
				if(m_DataRow.IsNull("ShipCountry"))
					return null;
				return m_DataRow.ShipCountry;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetShipCountryNull();
				}
				else
				{
					m_DataRow.ShipCountry = value;
				}
			}
		}

		#endregion Columns

		#region Relations

		public ICollection<Research.Services.Northwind.NorthwindDataSetEntities.OrderDetail> OrderDetails
		{
			get
			{
				Research.DataAccess.Northwind.NorthwindDataSet.OrderDetailRow[] rows = m_DataRow.GetOrderDetailRows();
				if(rows == null)
					return null;
				if(rows.Count() < 1)
					return new List<Research.Services.Northwind.NorthwindDataSetEntities.OrderDetail>();
				ICollection<Research.Services.Northwind.NorthwindDataSetEntities.OrderDetail> collection = new List<Research.Services.Northwind.NorthwindDataSetEntities.OrderDetail>();
				rows.ToList().ForEach(model => collection.Add(new Research.Services.Northwind.NorthwindDataSetEntities.OrderDetail(model)));
				return collection;
			}
		}

		public Research.Services.Northwind.NorthwindDataSetEntities.Shipper Shipper
		{
			get
			{
				if(m_DataRow.ShipperRow == null)
					return null;
				return new Research.Services.Northwind.NorthwindDataSetEntities.Shipper(m_DataRow.ShipperRow);
			}
			set
			{
				m_DataRow.ShipperRow = value.DataRow;
			}
		}

		public Research.Services.Northwind.NorthwindDataSetEntities.Customer Customer
		{
			get
			{
				if(m_DataRow.CustomerRow == null)
					return null;
				return new Research.Services.Northwind.NorthwindDataSetEntities.Customer(m_DataRow.CustomerRow);
			}
			set
			{
				m_DataRow.CustomerRow = value.DataRow;
			}
		}

		public Research.Services.Northwind.NorthwindDataSetEntities.Employee Employee
		{
			get
			{
				if(m_DataRow.EmployeeRow == null)
					return null;
				return new Research.Services.Northwind.NorthwindDataSetEntities.Employee(m_DataRow.EmployeeRow);
			}
			set
			{
				m_DataRow.EmployeeRow = value.DataRow;
			}
		}

		#endregion Relations

		public Research.DataAccess.Northwind.NorthwindDataSet.OrderRow DataRow
		{
			get
			{
				return m_DataRow;
			}
			set
			{
				m_DataRow = value;
			}
		}
	}


	public class Product
	{
		private Research.DataAccess.Northwind.NorthwindDataSet.ProductRow m_DataRow = null;

		public Product() { }

		public Product(Research.DataAccess.Northwind.NorthwindDataSet.ProductRow dataRow) { m_DataRow = dataRow; }

		#region Columns

		public System.Int32 ProductID
		{
			get
			{
				return m_DataRow.ProductID;
			}
			set
			{
				m_DataRow.ProductID = value;
			}
		}


		public System.String ProductName
		{
			get
			{
				return m_DataRow.ProductName;
			}
			set
			{
				m_DataRow.ProductName = value;
			}
		}


		public System.Int32? SupplierID
		{
			get
			{
				return (System.Int32?)m_DataRow.SupplierID;
			}
			set
			{
				if(!value.HasValue)
				{
					m_DataRow.SetSupplierIDNull();
				}
				else
				{
					m_DataRow.SupplierID = value.Value;
				}
			}
		}


		public System.Int32? CategoryID
		{
			get
			{
				return (System.Int32?)m_DataRow.CategoryID;
			}
			set
			{
				if(!value.HasValue)
				{
					m_DataRow.SetCategoryIDNull();
				}
				else
				{
					m_DataRow.CategoryID = value.Value;
				}
			}
		}


		public System.String QuantityPerUnit
		{
			get
			{
				if(m_DataRow.IsNull("QuantityPerUnit"))
					return null;
				return m_DataRow.QuantityPerUnit;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetQuantityPerUnitNull();
				}
				else
				{
					m_DataRow.QuantityPerUnit = value;
				}
			}
		}


		public System.Decimal? UnitPrice
		{
			get
			{
				return (System.Decimal?)m_DataRow.UnitPrice;
			}
			set
			{
				if(!value.HasValue)
				{
					m_DataRow.SetUnitPriceNull();
				}
				else
				{
					m_DataRow.UnitPrice = value.Value;
				}
			}
		}


		public System.Int16? UnitsInStock
		{
			get
			{
				return (System.Int16?)m_DataRow.UnitsInStock;
			}
			set
			{
				if(!value.HasValue)
				{
					m_DataRow.SetUnitsInStockNull();
				}
				else
				{
					m_DataRow.UnitsInStock = value.Value;
				}
			}
		}


		public System.Int16? UnitsOnOrder
		{
			get
			{
				return (System.Int16?)m_DataRow.UnitsOnOrder;
			}
			set
			{
				if(!value.HasValue)
				{
					m_DataRow.SetUnitsOnOrderNull();
				}
				else
				{
					m_DataRow.UnitsOnOrder = value.Value;
				}
			}
		}


		public System.Int16? ReorderLevel
		{
			get
			{
				return (System.Int16?)m_DataRow.ReorderLevel;
			}
			set
			{
				if(!value.HasValue)
				{
					m_DataRow.SetReorderLevelNull();
				}
				else
				{
					m_DataRow.ReorderLevel = value.Value;
				}
			}
		}


		public System.Boolean Discontinued
		{
			get
			{
				return m_DataRow.Discontinued;
			}
			set
			{
				m_DataRow.Discontinued = value;
			}
		}

		#endregion Columns

		#region Relations

		public ICollection<Research.Services.Northwind.NorthwindDataSetEntities.OrderDetail> OrderDetails
		{
			get
			{
				Research.DataAccess.Northwind.NorthwindDataSet.OrderDetailRow[] rows = m_DataRow.GetOrderDetailRows();
				if(rows == null)
					return null;
				if(rows.Count() < 1)
					return new List<Research.Services.Northwind.NorthwindDataSetEntities.OrderDetail>();
				ICollection<Research.Services.Northwind.NorthwindDataSetEntities.OrderDetail> collection = new List<Research.Services.Northwind.NorthwindDataSetEntities.OrderDetail>();
				rows.ToList().ForEach(model => collection.Add(new Research.Services.Northwind.NorthwindDataSetEntities.OrderDetail(model)));
				return collection;
			}
		}

		public Research.Services.Northwind.NorthwindDataSetEntities.Category Category
		{
			get
			{
				if(m_DataRow.CategoryRow == null)
					return null;
				return new Research.Services.Northwind.NorthwindDataSetEntities.Category(m_DataRow.CategoryRow);
			}
			set
			{
				m_DataRow.CategoryRow = value.DataRow;
			}
		}

		public Research.Services.Northwind.NorthwindDataSetEntities.Supplier Supplier
		{
			get
			{
				if(m_DataRow.SupplierRow == null)
					return null;
				return new Research.Services.Northwind.NorthwindDataSetEntities.Supplier(m_DataRow.SupplierRow);
			}
			set
			{
				m_DataRow.SupplierRow = value.DataRow;
			}
		}

		#endregion Relations

		public Research.DataAccess.Northwind.NorthwindDataSet.ProductRow DataRow
		{
			get
			{
				return m_DataRow;
			}
			set
			{
				m_DataRow = value;
			}
		}
	}


	public class Shipper
	{
		private Research.DataAccess.Northwind.NorthwindDataSet.ShipperRow m_DataRow = null;

		public Shipper() { }

		public Shipper(Research.DataAccess.Northwind.NorthwindDataSet.ShipperRow dataRow) { m_DataRow = dataRow; }

		#region Columns

		public System.Int32 ShipperID
		{
			get
			{
				return m_DataRow.ShipperID;
			}
			set
			{
				m_DataRow.ShipperID = value;
			}
		}


		public System.String CompanyName
		{
			get
			{
				return m_DataRow.CompanyName;
			}
			set
			{
				m_DataRow.CompanyName = value;
			}
		}


		public System.String Phone
		{
			get
			{
				if(m_DataRow.IsNull("Phone"))
					return null;
				return m_DataRow.Phone;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetPhoneNull();
				}
				else
				{
					m_DataRow.Phone = value;
				}
			}
		}

		#endregion Columns

		#region Relations

		public ICollection<Research.Services.Northwind.NorthwindDataSetEntities.Order> Orders
		{
			get
			{
				Research.DataAccess.Northwind.NorthwindDataSet.OrderRow[] rows = m_DataRow.GetOrderRows();
				if(rows == null)
					return null;
				if(rows.Count() < 1)
					return new List<Research.Services.Northwind.NorthwindDataSetEntities.Order>();
				ICollection<Research.Services.Northwind.NorthwindDataSetEntities.Order> collection = new List<Research.Services.Northwind.NorthwindDataSetEntities.Order>();
				rows.ToList().ForEach(model => collection.Add(new Research.Services.Northwind.NorthwindDataSetEntities.Order(model)));
				return collection;
			}
		}

		#endregion Relations

		public Research.DataAccess.Northwind.NorthwindDataSet.ShipperRow DataRow
		{
			get
			{
				return m_DataRow;
			}
			set
			{
				m_DataRow = value;
			}
		}
	}


	public class Supplier
	{
		private Research.DataAccess.Northwind.NorthwindDataSet.SupplierRow m_DataRow = null;

		public Supplier() { }

		public Supplier(Research.DataAccess.Northwind.NorthwindDataSet.SupplierRow dataRow) { m_DataRow = dataRow; }

		#region Columns

		public System.Int32 SupplierID
		{
			get
			{
				return m_DataRow.SupplierID;
			}
			set
			{
				m_DataRow.SupplierID = value;
			}
		}


		public System.String CompanyName
		{
			get
			{
				return m_DataRow.CompanyName;
			}
			set
			{
				m_DataRow.CompanyName = value;
			}
		}


		public System.String ContactName
		{
			get
			{
				if(m_DataRow.IsNull("ContactName"))
					return null;
				return m_DataRow.ContactName;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetContactNameNull();
				}
				else
				{
					m_DataRow.ContactName = value;
				}
			}
		}


		public System.String ContactTitle
		{
			get
			{
				if(m_DataRow.IsNull("ContactTitle"))
					return null;
				return m_DataRow.ContactTitle;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetContactTitleNull();
				}
				else
				{
					m_DataRow.ContactTitle = value;
				}
			}
		}


		public System.String Address
		{
			get
			{
				if(m_DataRow.IsNull("Address"))
					return null;
				return m_DataRow.Address;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetAddressNull();
				}
				else
				{
					m_DataRow.Address = value;
				}
			}
		}


		public System.String City
		{
			get
			{
				if(m_DataRow.IsNull("City"))
					return null;
				return m_DataRow.City;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetCityNull();
				}
				else
				{
					m_DataRow.City = value;
				}
			}
		}


		public System.String Region
		{
			get
			{
				if(m_DataRow.IsNull("Region"))
					return null;
				return m_DataRow.Region;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetRegionNull();
				}
				else
				{
					m_DataRow.Region = value;
				}
			}
		}


		public System.String PostalCode
		{
			get
			{
				if(m_DataRow.IsNull("PostalCode"))
					return null;
				return m_DataRow.PostalCode;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetPostalCodeNull();
				}
				else
				{
					m_DataRow.PostalCode = value;
				}
			}
		}


		public System.String Country
		{
			get
			{
				if(m_DataRow.IsNull("Country"))
					return null;
				return m_DataRow.Country;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetCountryNull();
				}
				else
				{
					m_DataRow.Country = value;
				}
			}
		}


		public System.String Phone
		{
			get
			{
				if(m_DataRow.IsNull("Phone"))
					return null;
				return m_DataRow.Phone;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetPhoneNull();
				}
				else
				{
					m_DataRow.Phone = value;
				}
			}
		}


		public System.String Fax
		{
			get
			{
				if(m_DataRow.IsNull("Fax"))
					return null;
				return m_DataRow.Fax;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetFaxNull();
				}
				else
				{
					m_DataRow.Fax = value;
				}
			}
		}


		public System.String HomePage
		{
			get
			{
				if(m_DataRow.IsNull("HomePage"))
					return null;
				return m_DataRow.HomePage;
			}
			set
			{
				if(value == null)
				{
					m_DataRow.SetHomePageNull();
				}
				else
				{
					m_DataRow.HomePage = value;
				}
			}
		}

		#endregion Columns

		#region Relations

		public ICollection<Research.Services.Northwind.NorthwindDataSetEntities.Product> Products
		{
			get
			{
				Research.DataAccess.Northwind.NorthwindDataSet.ProductRow[] rows = m_DataRow.GetProductRows();
				if(rows == null)
					return null;
				if(rows.Count() < 1)
					return new List<Research.Services.Northwind.NorthwindDataSetEntities.Product>();
				ICollection<Research.Services.Northwind.NorthwindDataSetEntities.Product> collection = new List<Research.Services.Northwind.NorthwindDataSetEntities.Product>();
				rows.ToList().ForEach(model => collection.Add(new Research.Services.Northwind.NorthwindDataSetEntities.Product(model)));
				return collection;
			}
		}

		#endregion Relations

		public Research.DataAccess.Northwind.NorthwindDataSet.SupplierRow DataRow
		{
			get
			{
				return m_DataRow;
			}
			set
			{
				m_DataRow = value;
			}
		}
	}

}