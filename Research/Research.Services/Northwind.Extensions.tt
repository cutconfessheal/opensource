<#@ template language="C#" hostspecific="true" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="$(SolutionDir)Research.Core\Bin\Debug\Research.Core.dll" #>
<#@ assembly name="$(SolutionDir)Research.DataAccess.Northwind\Bin\Debug\Research.DataAccess.Northwind.dll" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="System.Data.DataSetExtensions" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Data.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#
	Dictionary<String,String> paths =
		new Dictionary<String,String>
		{
			{"core", Host.ResolvePath("..\\Research.Core") },
			{"dataaccess", Host.ResolvePath("..\\Research.DataAccess.Northwind") }
			
		};
	Dictionary<String,String> namespaces =
		new Dictionary<String,String>
		{
			{"core", "Research.Core"},
			{"core.extensions", "Research.Core.Extensions"},
			{"set", "Research.DataAccess.Northwind"},
			{"adapter", "Research.DataAccess.Northwind.NorthwindDataSetTableAdapters"},
			{"entity", "Research.Services.Northwind.NorthwindDataSetEntities"},
			{"extension", "Research.Services.Northwind.NorthwindDataSetExtensions"},
			{"repository", "Research.Services.Northwind.NorthwindDataSetRepositories"},
			{"service", "Research.Services.Northwind.NorthwindDataSetServices"},
			{"target", "Research.Services.Northwind.NorthwindDataSetExtensions"},
		};
	Dictionary<String,Assembly> assemblies = new Dictionary<String,Assembly>();
	Dictionary<String,Type> types = new Dictionary<String,Type>();
	Dictionary<String,MethodInfo> methods = new Dictionary<String,MethodInfo>();
	foreach(Assembly asm in AppDomain.CurrentDomain.GetAssemblies())
	{
		string[] split = asm.FullName.Split(',');
		if(paths["core"].Contains(split[0]))
		{
			assemblies.Add("core",asm);
			types.Add("ext.str",asm.GetTypes().SingleOrDefault(typ => typ.FullName == namespaces["core.extensions"] + ".StringExtensions"));
			methods.Add("core.ext.concat", types["ext.str"].GetMethods().Where(model => model.GetParameters().Count() == 3).ToArray()[0]);
		}
		if(paths["dataaccess"].Contains(split[0]))
		{
			assemblies.Add("northwind",asm);
			types.Add("ds",asm.GetTypes().SingleOrDefault(typ => typ.FullName == namespaces["set"] + ".NorthwindDataSet"));
			types.Add("ta",asm.GetTypes().SingleOrDefault(typ => typ.FullName == namespaces["adapter"] + ".TableAdapterManager"));
		}
	}
	DataSet ds = (DataSet)Activator.CreateInstance(types["ds"]);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;

namespace <#= namespaces["target"] #>
{
	public static partial class NortwindDataSetExtensions
	{
<# foreach(Type type in types["ds"].GetNestedTypes()) { #>
<#	if(type.IsSubclassOf(typeof(System.Data.DataRow))) { #>

		#region <#= type.Name.Substring(0,type.Name.Length - "Row".Length) #>

		public static System.Collections.Generic.IEnumerable<<#= namespaces["entity"] + "." + type.Name.Substring(0,type.Name.Length - "Row".Length) #>> AsEntities(this <#= type.FullName.Replace("+",".").Substring(0,type.FullName.Length - "Row".Length) #>DataTable dataTable)
		{
			if(dataTable == null)
				return null;
			if(dataTable.Rows.Count < 1)
				return System.Linq.Enumerable.Empty<<#= namespaces["entity"] + "." + type.Name.Substring(0,type.Name.Length - "Row".Length) #>>();
			return dataTable.Rows.OfType<<#= type.FullName.Replace("+",".")#>>()
					.Aggregate<<#= type.FullName.Replace("+",".")#>,System.Collections.Generic.IEnumerable<<#= namespaces["entity"] + "." + type.Name.Substring(0,type.Name.Length - "Row".Length) #>>>
						(System.Linq.Enumerable.Empty<<#= namespaces["entity"] + "." + type.Name.Substring(0,type.Name.Length - "Row".Length) #>>(), (x,y) => x.Union(new[] { y.AsEntity() }));
		}

		public static <#= type.FullName.Replace("+",".").Substring(0,type.FullName.Length - "Row".Length) #>DataTable AsDataTable(this System.Collections.Generic.IEnumerable<<#= namespaces["entity"] + "." + type.Name.Substring(0,type.Name.Length - "Row".Length) #>> entities)
		{
			if(entities == null)
				return null;
			if(entities.Count() < 1)
				return new <#= type.FullName.Replace("+",".").Substring(0,type.FullName.Length - "Row".Length) #>DataTable();
			<#= type.FullName.Replace("+",".").Substring(0,type.FullName.Length - "Row".Length) #>DataTable dataTable = new <#= type.FullName.Replace("+",".").Substring(0,type.FullName.Length - "Row".Length) #>DataTable();
			entities.ToList().ForEach(model => dataTable.ImportRow(model.AsDataRow()));
			return dataTable;
		}

		public static <#= namespaces["entity"] + "." + type.Name.Substring(0,type.Name.Length - "Row".Length) #> AsEntity(this <#= type.FullName.Replace("+",".") #> row)
		{
			if(row == null)
				return null;
			return new <#= namespaces["entity"] + "." + type.Name.Substring(0,type.Name.Length - "Row".Length) #>(row);
		}

		public static <#= type.FullName.Replace("+",".") #> AsDataRow(this <#= namespaces["entity"] + "." + type.Name.Substring(0,type.Name.Length - "Row".Length) #> entity)
		{
			if(entity == null)
				return null;
			return entity.DataRow;
		}

		#endregion <#= type.Name.Substring(0,type.Name.Length - "Row".Length) #>

<#	} #>
<# } #>
	}
}