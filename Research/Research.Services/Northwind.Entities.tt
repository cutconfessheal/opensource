<#@ template language="C#" hostspecific="true" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="$(SolutionDir)Research.Core\Bin\Debug\Research.Core.dll" #>
<#@ assembly name="$(SolutionDir)Research.DataAccess.Northwind\Bin\Debug\Research.DataAccess.Northwind.dll" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="System.Data.DataSetExtensions" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Data.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#
	Dictionary<String,String> paths =
		new Dictionary<String,String>
		{
			{"core", Host.ResolvePath("..\\Research.Core") },
			{"dataaccess", Host.ResolvePath("..\\Research.DataAccess.Northwind") }
			
		};
	Dictionary<String,String> namespaces =
		new Dictionary<String,String>
		{
			{"core", "Research.Core"},
			{"core.extensions", "Research.Core.Extensions"},
			{"set", "Research.DataAccess.Northwind"},
			{"adapter", "Research.DataAccess.Northwind.NorthwindDataSetTableAdapters"},
			{"entity", "Research.Services.Northwind.NorthwindDataSetEntities"},
			{"extension", "Research.Services.Northwind.NorthwindDataSetExtensions"},
			{"repository", "Research.Services.Northwind.NorthwindDataSetRepositories"},
			{"service", "Research.Services.Northwind.NorthwindDataSetServices"},
			{"target", "Research.Services.Northwind.NorthwindDataSetEntities"},
		};
	Dictionary<String,Assembly> assemblies = new Dictionary<String,Assembly>();
	Dictionary<String,Type> types = new Dictionary<String,Type>();
	Dictionary<String,MethodInfo> methods = new Dictionary<String,MethodInfo>();
	foreach(Assembly asm in AppDomain.CurrentDomain.GetAssemblies())
	{
		string[] split = asm.FullName.Split(',');
		if(paths["core"].Contains(split[0]))
		{
			assemblies.Add("core",asm);
			types.Add("ext.str",asm.GetTypes().SingleOrDefault(typ => typ.FullName == namespaces["core.extensions"] + ".StringExtensions"));
			methods.Add("core.ext.concat", types["ext.str"].GetMethods().Where(model => model.GetParameters().Count() == 3).ToArray()[0]);
		}
		if(paths["dataaccess"].Contains(split[0]))
		{
			assemblies.Add("northwind",asm);
			types.Add("ds",asm.GetTypes().SingleOrDefault(typ => typ.FullName == namespaces["set"] + ".NorthwindDataSet"));
			types.Add("ta",asm.GetTypes().SingleOrDefault(typ => typ.FullName == namespaces["adapter"] + ".TableAdapterManager"));
		}
	}
	DataSet ds = (DataSet)Activator.CreateInstance(types["ds"]);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;

namespace <#= namespaces["target"] #>
{
<# foreach(Type type in types["ds"].GetNestedTypes()) { #>
<#	if(type.IsSubclassOf(typeof(System.Data.DataRow))) { #>
<#		DataTable dt = (DataTable)Activator.CreateInstance(types["ds"].GetNestedType(type.Name.Substring(0,type.Name.Length - "Row".Length) + "DataTable")); #>
<#		PropertyInfo[] props = type.GetProperties().Where(model => model.PropertyType.IsSubclassOf(typeof(System.Data.DataTable)) || model.PropertyType.IsSubclassOf(typeof(System.Data.DataRow))).ToArray(); #>
<#		MethodInfo[] meths = type.GetMethods().Where(model => model.ReturnType.ToString().Contains(namespaces["set"]) && !model.Name.StartsWith("get_")).ToArray(); #>

	public class <#= type.Name.Substring(0,type.Name.Length - "Row".Length) #>
	{
		private <#= type.FullName.Replace("+",".") #> m_DataRow = null;

		public <#= type.Name.Substring(0,type.Name.Length - "Row".Length) #>() { }

		public <#= type.Name.Substring(0,type.Name.Length - "Row".Length) #>(<#= type.FullName.Replace("+",".") #> dataRow) { m_DataRow = dataRow; }

		#region Columns
<# foreach(DataColumn col in dt.Columns) { #>

		public <#= col.DataType #><# if(col.AllowDBNull && col.DataType != typeof(System.String) && !col.DataType.IsArray) { #>?<# } #> <#= col.Caption #>
		{
			get
			{
<# if(col.AllowDBNull && col.DataType != typeof(System.String) && !col.DataType.IsArray) { #>
				return (<#= col.DataType #>?)m_DataRow.<#= col.Caption #>;
<# } else if(col.AllowDBNull) { #>
				if(m_DataRow.IsNull("<#= col.ColumnName #>"))
					return null;
				return m_DataRow.<#= col.Caption #>;
<# } else { #>
				return m_DataRow.<#= col.Caption #>;
<# } #>
			}
			set
			{
<# if(col.AllowDBNull && col.DataType != typeof(System.String) && !col.DataType.IsArray) { #>
				if(!value.HasValue)
				{
					m_DataRow.Set<#= col.Caption #>Null();
				}
				else
				{
					m_DataRow.<#= col.Caption #> = value.Value;
				}
<# } else if(col.AllowDBNull) { #>
				if(value == null)
				{
					m_DataRow.Set<#= col.Caption #>Null();
				}
				else
				{
					m_DataRow.<#= col.Caption #> = value;
				}
<# } else { #>
				m_DataRow.<#= col.Caption #> = value;
<# } #>
			}
		}

<# } #>
		#endregion Columns

		#region Relations
<# foreach(MethodInfo m in meths) { #>

		public ICollection<<#= namespaces["target"] + "." + m.Name.Substring("Get".Length, m.Name.Length - ("Get".Length + "Rows".Length)) #>> <#= m.Name.Substring("Get".Length, m.Name.Length - ("Get".Length + "Rows".Length)) #>s
		{
			get
			{
				<#= m.ReturnType.ToString().Replace("+",".") #> rows = m_DataRow.<#= m.Name #>();
				if(rows == null)
					return null;
				if(rows.Count() < 1)
					return new List<<#= namespaces["target"] + "." + m.Name.Substring("Get".Length, m.Name.Length - ("Get".Length + "Rows".Length)) #>>();
				ICollection<<#= namespaces["target"] + "." + m.Name.Substring("Get".Length, m.Name.Length - ("Get".Length + "Rows".Length)) #>> collection = new List<<#= namespaces["target"] + "." + m.Name.Substring("Get".Length, m.Name.Length - ("Get".Length + "Rows".Length)) #>>();
				rows.ToList().ForEach(model => collection.Add(new <#= namespaces["target"] + "." + m.Name.Substring("Get".Length, m.Name.Length - ("Get".Length + "Rows".Length)) #>(model)));
				return collection;
			}
		}

<# } #>
<# foreach(PropertyInfo p in props) { #>
<# if(p.Name.EndsWith("RowParent")) { #>
		public <#= namespaces["target"] + "." + p.PropertyType.Name.Substring(0,p.PropertyType.Name.Length - "Row".Length).Replace("+",".") #> <# if(p.Name.Substring(0,p.Name.Length - "RowParent".Length) == type.Name.Substring(0,type.Name.Length - "Row".Length)){ #>Parent<# } #><#= p.Name.Substring(0,p.Name.Length - "RowParent".Length) #>
<# } else { #>
		public <#= namespaces["target"] + "." + p.PropertyType.Name.Substring(0,p.PropertyType.Name.Length - "Row".Length).Replace("+",".") #> <#= p.Name.Substring(0,p.Name.Length - "Row".Length) #>
<# } #>
		{
			get
			{
				if(m_DataRow.<#= p.Name #> == null)
					return null;
				return new <#= namespaces["target"] + "." + p.PropertyType.Name.Substring(0,p.PropertyType.Name.Length - "Row".Length).Replace("+",".") #>(m_DataRow.<#= p.Name #>);
			}
			set
			{
				m_DataRow.<#= p.Name #> = value.DataRow;
			}
		}

<# } #>
		#endregion Relations

		public <#= type.FullName.Replace("+",".") #> DataRow
		{
			get
			{
				return m_DataRow;
			}
			set
			{
				m_DataRow = value;
			}
		}
	}

<#	} #>
<# } #>
}