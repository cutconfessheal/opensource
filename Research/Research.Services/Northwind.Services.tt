<#@ template language="C#" hostspecific="true" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="$(SolutionDir)Research.Core\Bin\Debug\Research.Core.dll" #>
<#@ assembly name="$(SolutionDir)Research.DataAccess.Northwind\Bin\Debug\Research.DataAccess.Northwind.dll" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="System.Data.DataSetExtensions" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Data.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#
	Dictionary<String,String> paths =
		new Dictionary<String,String>
		{
			{"core", Host.ResolvePath("..\\Research.Core") },
			{"dataaccess", Host.ResolvePath("..\\Research.DataAccess.Northwind") }
			
		};
	Dictionary<String,String> namespaces =
		new Dictionary<String,String>
		{
			{"core", "Research.Core"},
			{"core.extensions", "Research.Core.Extensions"},
			{"set", "Research.DataAccess.Northwind"},
			{"adapter", "Research.DataAccess.Northwind.NorthwindDataSetTableAdapters"},
			{"entity", "Research.Services.Northwind.NorthwindDataSetEntities"},
			{"extension", "Research.Services.Northwind.NorthwindDataSetExtensions"},
			{"repository", "Research.Services.Northwind.NorthwindDataSetRepositories"},
			{"service", "Research.Services.Northwind.NorthwindDataSetServices"},
			{"target", "Research.Services.Northwind.NorthwindDataSetServices"},
		};
	Dictionary<String,Assembly> assemblies = new Dictionary<String,Assembly>();
	Dictionary<String,Type> types = new Dictionary<String,Type>();
	Dictionary<String,MethodInfo> methods = new Dictionary<String,MethodInfo>();
	foreach(Assembly asm in AppDomain.CurrentDomain.GetAssemblies())
	{
		string[] split = asm.FullName.Split(',');
		if(paths["core"].Contains(split[0]))
		{
			assemblies.Add("core",asm);
			types.Add("ext.str",asm.GetTypes().SingleOrDefault(typ => typ.FullName == namespaces["core.extensions"] + ".StringExtensions"));
			methods.Add("core.ext.concat", types["ext.str"].GetMethods().Where(model => model.GetParameters().Count() == 3).ToArray()[0]);
		}
		if(paths["dataaccess"].Contains(split[0]))
		{
			assemblies.Add("northwind",asm);
			types.Add("ds",asm.GetTypes().SingleOrDefault(typ => typ.FullName == namespaces["set"] + ".NorthwindDataSet"));
			types.Add("ta",asm.GetTypes().SingleOrDefault(typ => typ.FullName == namespaces["adapter"] + ".TableAdapterManager"));
		}
	}
	DataSet ds = (DataSet)Activator.CreateInstance(types["ds"]);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;

namespace <#= namespaces["target"] #>
{
	public partial interface IServiceManager
	{
		System.Data.IDbConnection Connection { get; }
<# foreach(var p in types["ta"].GetProperties(BindingFlags.Public | BindingFlags.Instance)) { #>
<#		if (p.PropertyType.IsSubclassOf(typeof(Component))) { #>
		<#= namespaces["repository"] + ".I" + p.PropertyType.Name.Substring(0,p.PropertyType.Name.Length - "TableAdapter".Length) #>Repository <#= p.PropertyType.Name.Substring(0,p.PropertyType.Name.Length - "TableAdapter".Length) #>Repository { get; }
<#		} #>
<#	} #>
	}

	
	public partial class ServiceManager : <#= namespaces["target"] #>.IServiceManager
	{
		private <#= types["ta"].FullName #> m_TableAdapterManager = null;
<# foreach(var p in types["ta"].GetProperties(BindingFlags.Public | BindingFlags.Instance)) { #>
<#		if (p.PropertyType.IsSubclassOf(typeof(Component))) { #>
		private <#= namespaces["repository"] + ".I" + p.PropertyType.Name.Substring(0,p.PropertyType.Name.Length - "TableAdapter".Length) #>Repository m_<#= p.PropertyType.Name.Substring(0,p.PropertyType.Name.Length - "TableAdapter".Length) #>Repository = null;
<#		} #>
<#	} #>

		public ServiceManager()
		{
		}

		public ServiceManager(<#= types["ta"].FullName #> manager)
		{
			m_TableAdapterManager = manager;
		}

		#region TableAdapters

<# foreach(var p in types["ta"].GetProperties(BindingFlags.Public | BindingFlags.Instance)) { #>
<#		if (p.PropertyType.IsSubclassOf(typeof(Component))) { #>
			public <#= namespaces["repository"] + ".I" + p.PropertyType.Name.Substring(0,p.PropertyType.Name.Length - "TableAdapter".Length) #>Repository <#= p.PropertyType.Name.Substring(0,p.PropertyType.Name.Length - "TableAdapter".Length) #>Repository
			{
				get
				{
					if(m_TableAdapterManager.<#= p.PropertyType.Name #> == null)
					{
						m_TableAdapterManager.<#= p.PropertyType.Name #> = new <#= p.PropertyType.FullName #>();
						m_<#= p.PropertyType.Name.Substring(0,p.PropertyType.Name.Length - "TableAdapter".Length) #>Repository = new <#= namespaces["repository"] + "." + p.PropertyType.Name.Substring(0,p.PropertyType.Name.Length - "TableAdapter".Length) #>Repository(m_TableAdapterManager.<#= p.PropertyType.Name #>);
					}
					return m_<#= p.PropertyType.Name.Substring(0,p.PropertyType.Name.Length - "TableAdapter".Length) #>Repository;
				}
			}
<#		} #>
<#	} #>

		#endregion TableAdapters

		public System.Data.IDbConnection Connection { get { return m_TableAdapterManager.Connection; } }
	}
}
