<#@ template language="C#" hostspecific="true" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="$(SolutionDir)Research.Core\Bin\Debug\Research.Core.dll" #>
<#@ assembly name="$(SolutionDir)Research.DataAccess.Northwind\Bin\Debug\Research.DataAccess.Northwind.dll" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="System.Data.DataSetExtensions" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Data.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#
	Dictionary<String,String> paths =
		new Dictionary<String,String>
		{
			{"core", Host.ResolvePath("..\\Research.Core") },
			{"dataaccess", Host.ResolvePath("..\\Research.DataAccess.Northwind") }
			
		};
	Dictionary<String,String> namespaces =
		new Dictionary<String,String>
		{
			{"core", "Research.Core"},
			{"core.extensions", "Research.Core.Extensions"},
			{"set", "Research.DataAccess.Northwind"},
			{"adapter", "Research.DataAccess.Northwind.NorthwindDataSetTableAdapters"},
			{"entity", "Research.Services.Northwind.NorthwindDataSetEntities"},
			{"extension", "Research.Services.Northwind.NorthwindDataSetExtensions"},
			{"repository", "Research.Services.Northwind.NorthwindDataSetRepositories"},
			{"service", "Research.Services.Northwind.NorthwindDataSetServices"},
			{"target", "Research.Services.Northwind.NorthwindDataSetRepositories"},
		};
	Dictionary<String,Assembly> assemblies = new Dictionary<String,Assembly>();
	Dictionary<String,Type> types = new Dictionary<String,Type>();
	Dictionary<String,MethodInfo> methods = new Dictionary<String,MethodInfo>();
	foreach(Assembly asm in AppDomain.CurrentDomain.GetAssemblies())
	{
		string[] split = asm.FullName.Split(',');
		if(paths["core"].Contains(split[0]))
		{
			assemblies.Add("core",asm);
			types.Add("ext.str",asm.GetTypes().SingleOrDefault(typ => typ.FullName == namespaces["core.extensions"] + ".StringExtensions"));
			methods.Add("core.ext.concat", types["ext.str"].GetMethods().Where(model => model.GetParameters().Count() == 3).ToArray()[0]);
		}
		if(paths["dataaccess"].Contains(split[0]))
		{
			assemblies.Add("northwind",asm);
			types.Add("ds",asm.GetTypes().SingleOrDefault(typ => typ.FullName == namespaces["set"] + ".NorthwindDataSet"));
			types.Add("ta",asm.GetTypes().SingleOrDefault(typ => typ.FullName == namespaces["adapter"] + ".TableAdapterManager"));
		}
	}
	string[] notSupportedTypes = { "ntext", "text", "xml", "image"};
	DataSet ds = (DataSet)Activator.CreateInstance(types["ds"]);
	var ta = Activator.CreateInstance(types["ta"]);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
//
//    Additional information:
//    SQL Server does not handle comparison of NText, Text, Xml, or Image data types.
//    Added SourceTableName property to every TableAdapter.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using <#= namespaces["extension"] #>;

namespace <#= namespaces["target"] #>
{
<# foreach(var p in types["ta"].GetProperties(BindingFlags.Public | BindingFlags.Instance)) { #>
<#		if (p.PropertyType.IsSubclassOf(typeof(Component))) { #>

	public partial interface I<#= p.Name.Substring(0,p.Name.Length - "TableAdapter".Length) #>Repository
	{
<# foreach(var m in p.PropertyType.GetMethods().Where(model => model.ReturnType.FullName.Contains(namespaces["set"]) || model.Name.StartsWith("Fill"))) { #>
<#	ParameterInfo[] parameters = m.GetParameters(); #>
		<#= m.ReturnType.FullName.Replace("+",".") #> <#= m.Name #>(<#= methods["core.ext.concat"].Invoke(null, new object[]{parameters.Select(model => (model.ParameterType.FullName.StartsWith("System.Nullable") ? model.ParameterType.FullName.Substring("System.Nullable`1[[".Length).Split(',')[0] + "?" : model.ParameterType.FullName.Replace("+",".")) + " " + model.Name).ToArray(),string.Empty,","})  #>);
<# } #>
<# if(p.PropertyType.GetMethods().Where(model => model.Name.StartsWith("Insert")).Count() > 0) { #>
		System.Int32 Insert(<#= namespaces["entity"] #>.<#= p.Name.Substring(0,p.Name.Length - "TableAdapter".Length) #> entity);
		System.Int32 Insert(<#= namespaces["entity"] #>.<#= p.Name.Substring(0,p.Name.Length - "TableAdapter".Length) #>[] entities);
<# } #>
<# if(p.PropertyType.GetMethods().Where(model => model.Name.StartsWith("Update")).Count() > 0) { #>
		System.Int32 Update(<#= namespaces["entity"] #>.<#= p.Name.Substring(0,p.Name.Length - "TableAdapter".Length) #> entity);
		System.Int32 Update(<#= namespaces["entity"] #>.<#= p.Name.Substring(0,p.Name.Length - "TableAdapter".Length) #>[] entities);
<# } #>
<# if(p.PropertyType.GetMethods().Where(model => model.Name.StartsWith("Delete")).Count() > 0) { #>
		System.Int32 Delete(<#= namespaces["entity"] #>.<#= p.Name.Substring(0,p.Name.Length - "TableAdapter".Length) #> entity);
		System.Int32 Delete(<#= namespaces["entity"] #>.<#= p.Name.Substring(0,p.Name.Length - "TableAdapter".Length) #>[] entities);
<# } #>
	}

<#		} #>
<#	} #>

<# foreach(var p in types["ta"].GetProperties(BindingFlags.Public | BindingFlags.Instance)) { #>
<#		if (p.PropertyType.IsSubclassOf(typeof(Component))) /*DATA_TYPE, COLUMN_NAME, TABLE_NAME*/ { #>
<#			types["ta"].GetProperty(p.PropertyType.Name).SetValue(ta, Activator.CreateInstance(p.PropertyType), null); #>
<#			DataTable tbl = (DataTable)types["ds"].GetProperty(p.Name.Substring(0,p.Name.Length - "TableAdapter".Length)).GetValue(ds,null); #>
<#			System.Data.Common.DbConnection conn = (System.Data.Common.DbConnection)types["ta"].GetProperty("Connection").GetValue(ta,null); #>
<#			conn.Open(); #>
<#			System.Data.DataTable schema = conn.GetSchema("Columns",new string[]{null, null, (string)tbl.GetType().GetProperty("SourceTableName").GetValue(tbl,null)}); #>
<#			conn.Close(); #>
	public partial class <#= p.Name.Substring(0,p.Name.Length - "TableAdapter".Length) #>Repository :
		<#= namespaces["target"] #>.I<#= p.Name.Substring(0,p.Name.Length - "TableAdapter".Length) #>Repository
	{
		private <#= p.PropertyType.FullName #> m_Adapter = null;

		public <#= p.Name.Substring(0,p.Name.Length - "TableAdapter".Length) #>Repository() { }

		public <#= p.Name.Substring(0,p.Name.Length - "TableAdapter".Length) #>Repository(<#= p.PropertyType.FullName #> adapter)
		{
			m_Adapter = adapter;
		}

<# foreach(var m in p.PropertyType.GetMethods().Where(model => model.ReturnType.FullName.Contains(namespaces["set"]) || model.Name.StartsWith("Fill"))) { #>
<#	ParameterInfo[] parameters = m.GetParameters(); #>
		public <#= m.ReturnType.FullName.Replace("+",".") #> <#= m.Name #>(<#= methods["core.ext.concat"].Invoke(null, new object[]{parameters.Select(model => (model.ParameterType.FullName.StartsWith("System.Nullable") ? model.ParameterType.FullName.Substring("System.Nullable`1[[".Length).Split(',')[0] + "?" : model.ParameterType.FullName.Replace("+",".")) + " " + model.Name).ToArray(),string.Empty,", "})  #>)
		{
			return m_Adapter.<#= m.Name #>(<#= methods["core.ext.concat"].Invoke(null, new object[]{parameters.Select(model => model.Name).ToArray(),string.Empty,","})  #>);
		}

<# } #>
<# if(p.PropertyType.GetMethods().Where(model => model.Name.StartsWith("Insert")).Count() > 0) { #>
		public System.Int32 Insert(<#= namespaces["entity"] #>.<#= p.Name.Substring(0,p.Name.Length - "TableAdapter".Length) #> entity)
		{
			return m_Adapter.Insert(<#= methods["core.ext.concat"].Invoke(null, new object[]{tbl.Columns.OfType<DataColumn>().Where(model => !model.AutoIncrement).Select(model => model.Caption).ToArray(),"entity.",", "})  #>);
		}

		public System.Int32 Insert(<#= namespaces["entity"] #>.<#= p.Name.Substring(0,p.Name.Length - "TableAdapter".Length) #>[] entities)
		{
			System.Int32 affected = 0;
			foreach(<#= namespaces["entity"] #>.<#= p.Name.Substring(0,p.Name.Length - "TableAdapter".Length) #> entity in entities)
				affected += Insert(entity);
			return affected;
		}

<# } #>
<# if(p.PropertyType.GetMethods().Where(model => model.Name.StartsWith("Update")).Count() > 0) { #>
		public System.Int32 Update(<#= namespaces["entity"] #>.<#= p.Name.Substring(0,p.Name.Length - "TableAdapter".Length) #> entity)
		{
			return m_Adapter.Update(entity.AsDataRow());
		}

		public System.Int32 Update(<#= namespaces["entity"] #>.<#= p.Name.Substring(0,p.Name.Length - "TableAdapter".Length) #>[] entities)
		{
			System.Int32 affected = 0;
			foreach(<#= namespaces["entity"] #>.<#= p.Name.Substring(0,p.Name.Length - "TableAdapter".Length) #> entity in entities)
				affected += Update(entity);
			return affected;
		}

<# } #>
<# if(p.PropertyType.GetMethods().Where(model => model.Name.StartsWith("Delete")).Count() > 0) { #>
		public System.Int32 Delete(<#= namespaces["entity"] #>.<#= p.Name.Substring(0,p.Name.Length - "TableAdapter".Length) #> entity)
		{
			var row = entity.AsDataRow();
			return m_Adapter.Delete(<#= methods["core.ext.concat"].Invoke(null, new object[]{tbl.Columns.OfType<DataColumn>().Where(model => schema.Rows[model.Ordinal] != null && !notSupportedTypes.Contains(schema.Rows[model.Ordinal]["DATA_TYPE"].ToString().ToLower())).Select(model => model.Caption).ToArray(),"row.",", "})  #>);
		}

		public System.Int32 Delete(<#= namespaces["entity"] #>.<#= p.Name.Substring(0,p.Name.Length - "TableAdapter".Length) #>[] entities)
		{
			System.Int32 affected = 0;
			foreach(<#= namespaces["entity"] #>.<#= p.Name.Substring(0,p.Name.Length - "TableAdapter".Length) #> entity in entities)
				affected += Delete(entity);
			return affected;
		}

<# } #>
		private <#= p.PropertyType.FullName #> Adapter
		{
			get
			{
				return m_Adapter;
			}
		}
	}

<#		} #>
<#	} #>
}