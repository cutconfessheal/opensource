//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;

namespace Research.Services.Northwind.NorthwindDataSetExtensions
{
	public static partial class NortwindDataSetExtensions
	{

		#region Category

		public static System.Collections.Generic.IEnumerable<Research.Services.Northwind.NorthwindDataSetEntities.Category> AsEntities(this Research.DataAccess.Northwind.NorthwindDataSet.CategoryDataTable dataTable)
		{
			if(dataTable == null)
				return null;
			if(dataTable.Rows.Count < 1)
				return System.Linq.Enumerable.Empty<Research.Services.Northwind.NorthwindDataSetEntities.Category>();
			return dataTable.Rows.OfType<Research.DataAccess.Northwind.NorthwindDataSet.CategoryRow>()
					.Aggregate<Research.DataAccess.Northwind.NorthwindDataSet.CategoryRow,System.Collections.Generic.IEnumerable<Research.Services.Northwind.NorthwindDataSetEntities.Category>>
						(System.Linq.Enumerable.Empty<Research.Services.Northwind.NorthwindDataSetEntities.Category>(), (x,y) => x.Union(new[] { y.AsEntity() }));
		}

		public static Research.DataAccess.Northwind.NorthwindDataSet.CategoryDataTable AsDataTable(this System.Collections.Generic.IEnumerable<Research.Services.Northwind.NorthwindDataSetEntities.Category> entities)
		{
			if(entities == null)
				return null;
			if(entities.Count() < 1)
				return new Research.DataAccess.Northwind.NorthwindDataSet.CategoryDataTable();
			Research.DataAccess.Northwind.NorthwindDataSet.CategoryDataTable dataTable = new Research.DataAccess.Northwind.NorthwindDataSet.CategoryDataTable();
			entities.ToList().ForEach(model => dataTable.ImportRow(model.AsDataRow()));
			return dataTable;
		}

		public static Research.Services.Northwind.NorthwindDataSetEntities.Category AsEntity(this Research.DataAccess.Northwind.NorthwindDataSet.CategoryRow row)
		{
			if(row == null)
				return null;
			return new Research.Services.Northwind.NorthwindDataSetEntities.Category(row);
		}

		public static Research.DataAccess.Northwind.NorthwindDataSet.CategoryRow AsDataRow(this Research.Services.Northwind.NorthwindDataSetEntities.Category entity)
		{
			if(entity == null)
				return null;
			return entity.DataRow;
		}

		#endregion Category


		#region Customer

		public static System.Collections.Generic.IEnumerable<Research.Services.Northwind.NorthwindDataSetEntities.Customer> AsEntities(this Research.DataAccess.Northwind.NorthwindDataSet.CustomerDataTable dataTable)
		{
			if(dataTable == null)
				return null;
			if(dataTable.Rows.Count < 1)
				return System.Linq.Enumerable.Empty<Research.Services.Northwind.NorthwindDataSetEntities.Customer>();
			return dataTable.Rows.OfType<Research.DataAccess.Northwind.NorthwindDataSet.CustomerRow>()
					.Aggregate<Research.DataAccess.Northwind.NorthwindDataSet.CustomerRow,System.Collections.Generic.IEnumerable<Research.Services.Northwind.NorthwindDataSetEntities.Customer>>
						(System.Linq.Enumerable.Empty<Research.Services.Northwind.NorthwindDataSetEntities.Customer>(), (x,y) => x.Union(new[] { y.AsEntity() }));
		}

		public static Research.DataAccess.Northwind.NorthwindDataSet.CustomerDataTable AsDataTable(this System.Collections.Generic.IEnumerable<Research.Services.Northwind.NorthwindDataSetEntities.Customer> entities)
		{
			if(entities == null)
				return null;
			if(entities.Count() < 1)
				return new Research.DataAccess.Northwind.NorthwindDataSet.CustomerDataTable();
			Research.DataAccess.Northwind.NorthwindDataSet.CustomerDataTable dataTable = new Research.DataAccess.Northwind.NorthwindDataSet.CustomerDataTable();
			entities.ToList().ForEach(model => dataTable.ImportRow(model.AsDataRow()));
			return dataTable;
		}

		public static Research.Services.Northwind.NorthwindDataSetEntities.Customer AsEntity(this Research.DataAccess.Northwind.NorthwindDataSet.CustomerRow row)
		{
			if(row == null)
				return null;
			return new Research.Services.Northwind.NorthwindDataSetEntities.Customer(row);
		}

		public static Research.DataAccess.Northwind.NorthwindDataSet.CustomerRow AsDataRow(this Research.Services.Northwind.NorthwindDataSetEntities.Customer entity)
		{
			if(entity == null)
				return null;
			return entity.DataRow;
		}

		#endregion Customer


		#region Employee

		public static System.Collections.Generic.IEnumerable<Research.Services.Northwind.NorthwindDataSetEntities.Employee> AsEntities(this Research.DataAccess.Northwind.NorthwindDataSet.EmployeeDataTable dataTable)
		{
			if(dataTable == null)
				return null;
			if(dataTable.Rows.Count < 1)
				return System.Linq.Enumerable.Empty<Research.Services.Northwind.NorthwindDataSetEntities.Employee>();
			return dataTable.Rows.OfType<Research.DataAccess.Northwind.NorthwindDataSet.EmployeeRow>()
					.Aggregate<Research.DataAccess.Northwind.NorthwindDataSet.EmployeeRow,System.Collections.Generic.IEnumerable<Research.Services.Northwind.NorthwindDataSetEntities.Employee>>
						(System.Linq.Enumerable.Empty<Research.Services.Northwind.NorthwindDataSetEntities.Employee>(), (x,y) => x.Union(new[] { y.AsEntity() }));
		}

		public static Research.DataAccess.Northwind.NorthwindDataSet.EmployeeDataTable AsDataTable(this System.Collections.Generic.IEnumerable<Research.Services.Northwind.NorthwindDataSetEntities.Employee> entities)
		{
			if(entities == null)
				return null;
			if(entities.Count() < 1)
				return new Research.DataAccess.Northwind.NorthwindDataSet.EmployeeDataTable();
			Research.DataAccess.Northwind.NorthwindDataSet.EmployeeDataTable dataTable = new Research.DataAccess.Northwind.NorthwindDataSet.EmployeeDataTable();
			entities.ToList().ForEach(model => dataTable.ImportRow(model.AsDataRow()));
			return dataTable;
		}

		public static Research.Services.Northwind.NorthwindDataSetEntities.Employee AsEntity(this Research.DataAccess.Northwind.NorthwindDataSet.EmployeeRow row)
		{
			if(row == null)
				return null;
			return new Research.Services.Northwind.NorthwindDataSetEntities.Employee(row);
		}

		public static Research.DataAccess.Northwind.NorthwindDataSet.EmployeeRow AsDataRow(this Research.Services.Northwind.NorthwindDataSetEntities.Employee entity)
		{
			if(entity == null)
				return null;
			return entity.DataRow;
		}

		#endregion Employee


		#region OrderDetail

		public static System.Collections.Generic.IEnumerable<Research.Services.Northwind.NorthwindDataSetEntities.OrderDetail> AsEntities(this Research.DataAccess.Northwind.NorthwindDataSet.OrderDetailDataTable dataTable)
		{
			if(dataTable == null)
				return null;
			if(dataTable.Rows.Count < 1)
				return System.Linq.Enumerable.Empty<Research.Services.Northwind.NorthwindDataSetEntities.OrderDetail>();
			return dataTable.Rows.OfType<Research.DataAccess.Northwind.NorthwindDataSet.OrderDetailRow>()
					.Aggregate<Research.DataAccess.Northwind.NorthwindDataSet.OrderDetailRow,System.Collections.Generic.IEnumerable<Research.Services.Northwind.NorthwindDataSetEntities.OrderDetail>>
						(System.Linq.Enumerable.Empty<Research.Services.Northwind.NorthwindDataSetEntities.OrderDetail>(), (x,y) => x.Union(new[] { y.AsEntity() }));
		}

		public static Research.DataAccess.Northwind.NorthwindDataSet.OrderDetailDataTable AsDataTable(this System.Collections.Generic.IEnumerable<Research.Services.Northwind.NorthwindDataSetEntities.OrderDetail> entities)
		{
			if(entities == null)
				return null;
			if(entities.Count() < 1)
				return new Research.DataAccess.Northwind.NorthwindDataSet.OrderDetailDataTable();
			Research.DataAccess.Northwind.NorthwindDataSet.OrderDetailDataTable dataTable = new Research.DataAccess.Northwind.NorthwindDataSet.OrderDetailDataTable();
			entities.ToList().ForEach(model => dataTable.ImportRow(model.AsDataRow()));
			return dataTable;
		}

		public static Research.Services.Northwind.NorthwindDataSetEntities.OrderDetail AsEntity(this Research.DataAccess.Northwind.NorthwindDataSet.OrderDetailRow row)
		{
			if(row == null)
				return null;
			return new Research.Services.Northwind.NorthwindDataSetEntities.OrderDetail(row);
		}

		public static Research.DataAccess.Northwind.NorthwindDataSet.OrderDetailRow AsDataRow(this Research.Services.Northwind.NorthwindDataSetEntities.OrderDetail entity)
		{
			if(entity == null)
				return null;
			return entity.DataRow;
		}

		#endregion OrderDetail


		#region Order

		public static System.Collections.Generic.IEnumerable<Research.Services.Northwind.NorthwindDataSetEntities.Order> AsEntities(this Research.DataAccess.Northwind.NorthwindDataSet.OrderDataTable dataTable)
		{
			if(dataTable == null)
				return null;
			if(dataTable.Rows.Count < 1)
				return System.Linq.Enumerable.Empty<Research.Services.Northwind.NorthwindDataSetEntities.Order>();
			return dataTable.Rows.OfType<Research.DataAccess.Northwind.NorthwindDataSet.OrderRow>()
					.Aggregate<Research.DataAccess.Northwind.NorthwindDataSet.OrderRow,System.Collections.Generic.IEnumerable<Research.Services.Northwind.NorthwindDataSetEntities.Order>>
						(System.Linq.Enumerable.Empty<Research.Services.Northwind.NorthwindDataSetEntities.Order>(), (x,y) => x.Union(new[] { y.AsEntity() }));
		}

		public static Research.DataAccess.Northwind.NorthwindDataSet.OrderDataTable AsDataTable(this System.Collections.Generic.IEnumerable<Research.Services.Northwind.NorthwindDataSetEntities.Order> entities)
		{
			if(entities == null)
				return null;
			if(entities.Count() < 1)
				return new Research.DataAccess.Northwind.NorthwindDataSet.OrderDataTable();
			Research.DataAccess.Northwind.NorthwindDataSet.OrderDataTable dataTable = new Research.DataAccess.Northwind.NorthwindDataSet.OrderDataTable();
			entities.ToList().ForEach(model => dataTable.ImportRow(model.AsDataRow()));
			return dataTable;
		}

		public static Research.Services.Northwind.NorthwindDataSetEntities.Order AsEntity(this Research.DataAccess.Northwind.NorthwindDataSet.OrderRow row)
		{
			if(row == null)
				return null;
			return new Research.Services.Northwind.NorthwindDataSetEntities.Order(row);
		}

		public static Research.DataAccess.Northwind.NorthwindDataSet.OrderRow AsDataRow(this Research.Services.Northwind.NorthwindDataSetEntities.Order entity)
		{
			if(entity == null)
				return null;
			return entity.DataRow;
		}

		#endregion Order


		#region Product

		public static System.Collections.Generic.IEnumerable<Research.Services.Northwind.NorthwindDataSetEntities.Product> AsEntities(this Research.DataAccess.Northwind.NorthwindDataSet.ProductDataTable dataTable)
		{
			if(dataTable == null)
				return null;
			if(dataTable.Rows.Count < 1)
				return System.Linq.Enumerable.Empty<Research.Services.Northwind.NorthwindDataSetEntities.Product>();
			return dataTable.Rows.OfType<Research.DataAccess.Northwind.NorthwindDataSet.ProductRow>()
					.Aggregate<Research.DataAccess.Northwind.NorthwindDataSet.ProductRow,System.Collections.Generic.IEnumerable<Research.Services.Northwind.NorthwindDataSetEntities.Product>>
						(System.Linq.Enumerable.Empty<Research.Services.Northwind.NorthwindDataSetEntities.Product>(), (x,y) => x.Union(new[] { y.AsEntity() }));
		}

		public static Research.DataAccess.Northwind.NorthwindDataSet.ProductDataTable AsDataTable(this System.Collections.Generic.IEnumerable<Research.Services.Northwind.NorthwindDataSetEntities.Product> entities)
		{
			if(entities == null)
				return null;
			if(entities.Count() < 1)
				return new Research.DataAccess.Northwind.NorthwindDataSet.ProductDataTable();
			Research.DataAccess.Northwind.NorthwindDataSet.ProductDataTable dataTable = new Research.DataAccess.Northwind.NorthwindDataSet.ProductDataTable();
			entities.ToList().ForEach(model => dataTable.ImportRow(model.AsDataRow()));
			return dataTable;
		}

		public static Research.Services.Northwind.NorthwindDataSetEntities.Product AsEntity(this Research.DataAccess.Northwind.NorthwindDataSet.ProductRow row)
		{
			if(row == null)
				return null;
			return new Research.Services.Northwind.NorthwindDataSetEntities.Product(row);
		}

		public static Research.DataAccess.Northwind.NorthwindDataSet.ProductRow AsDataRow(this Research.Services.Northwind.NorthwindDataSetEntities.Product entity)
		{
			if(entity == null)
				return null;
			return entity.DataRow;
		}

		#endregion Product


		#region Shipper

		public static System.Collections.Generic.IEnumerable<Research.Services.Northwind.NorthwindDataSetEntities.Shipper> AsEntities(this Research.DataAccess.Northwind.NorthwindDataSet.ShipperDataTable dataTable)
		{
			if(dataTable == null)
				return null;
			if(dataTable.Rows.Count < 1)
				return System.Linq.Enumerable.Empty<Research.Services.Northwind.NorthwindDataSetEntities.Shipper>();
			return dataTable.Rows.OfType<Research.DataAccess.Northwind.NorthwindDataSet.ShipperRow>()
					.Aggregate<Research.DataAccess.Northwind.NorthwindDataSet.ShipperRow,System.Collections.Generic.IEnumerable<Research.Services.Northwind.NorthwindDataSetEntities.Shipper>>
						(System.Linq.Enumerable.Empty<Research.Services.Northwind.NorthwindDataSetEntities.Shipper>(), (x,y) => x.Union(new[] { y.AsEntity() }));
		}

		public static Research.DataAccess.Northwind.NorthwindDataSet.ShipperDataTable AsDataTable(this System.Collections.Generic.IEnumerable<Research.Services.Northwind.NorthwindDataSetEntities.Shipper> entities)
		{
			if(entities == null)
				return null;
			if(entities.Count() < 1)
				return new Research.DataAccess.Northwind.NorthwindDataSet.ShipperDataTable();
			Research.DataAccess.Northwind.NorthwindDataSet.ShipperDataTable dataTable = new Research.DataAccess.Northwind.NorthwindDataSet.ShipperDataTable();
			entities.ToList().ForEach(model => dataTable.ImportRow(model.AsDataRow()));
			return dataTable;
		}

		public static Research.Services.Northwind.NorthwindDataSetEntities.Shipper AsEntity(this Research.DataAccess.Northwind.NorthwindDataSet.ShipperRow row)
		{
			if(row == null)
				return null;
			return new Research.Services.Northwind.NorthwindDataSetEntities.Shipper(row);
		}

		public static Research.DataAccess.Northwind.NorthwindDataSet.ShipperRow AsDataRow(this Research.Services.Northwind.NorthwindDataSetEntities.Shipper entity)
		{
			if(entity == null)
				return null;
			return entity.DataRow;
		}

		#endregion Shipper


		#region Supplier

		public static System.Collections.Generic.IEnumerable<Research.Services.Northwind.NorthwindDataSetEntities.Supplier> AsEntities(this Research.DataAccess.Northwind.NorthwindDataSet.SupplierDataTable dataTable)
		{
			if(dataTable == null)
				return null;
			if(dataTable.Rows.Count < 1)
				return System.Linq.Enumerable.Empty<Research.Services.Northwind.NorthwindDataSetEntities.Supplier>();
			return dataTable.Rows.OfType<Research.DataAccess.Northwind.NorthwindDataSet.SupplierRow>()
					.Aggregate<Research.DataAccess.Northwind.NorthwindDataSet.SupplierRow,System.Collections.Generic.IEnumerable<Research.Services.Northwind.NorthwindDataSetEntities.Supplier>>
						(System.Linq.Enumerable.Empty<Research.Services.Northwind.NorthwindDataSetEntities.Supplier>(), (x,y) => x.Union(new[] { y.AsEntity() }));
		}

		public static Research.DataAccess.Northwind.NorthwindDataSet.SupplierDataTable AsDataTable(this System.Collections.Generic.IEnumerable<Research.Services.Northwind.NorthwindDataSetEntities.Supplier> entities)
		{
			if(entities == null)
				return null;
			if(entities.Count() < 1)
				return new Research.DataAccess.Northwind.NorthwindDataSet.SupplierDataTable();
			Research.DataAccess.Northwind.NorthwindDataSet.SupplierDataTable dataTable = new Research.DataAccess.Northwind.NorthwindDataSet.SupplierDataTable();
			entities.ToList().ForEach(model => dataTable.ImportRow(model.AsDataRow()));
			return dataTable;
		}

		public static Research.Services.Northwind.NorthwindDataSetEntities.Supplier AsEntity(this Research.DataAccess.Northwind.NorthwindDataSet.SupplierRow row)
		{
			if(row == null)
				return null;
			return new Research.Services.Northwind.NorthwindDataSetEntities.Supplier(row);
		}

		public static Research.DataAccess.Northwind.NorthwindDataSet.SupplierRow AsDataRow(this Research.Services.Northwind.NorthwindDataSetEntities.Supplier entity)
		{
			if(entity == null)
				return null;
			return entity.DataRow;
		}

		#endregion Supplier

	}
}